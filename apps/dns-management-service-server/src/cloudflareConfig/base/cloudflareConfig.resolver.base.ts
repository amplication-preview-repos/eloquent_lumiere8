/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CloudflareConfig } from "./CloudflareConfig";
import { CloudflareConfigCountArgs } from "./CloudflareConfigCountArgs";
import { CloudflareConfigFindManyArgs } from "./CloudflareConfigFindManyArgs";
import { CloudflareConfigFindUniqueArgs } from "./CloudflareConfigFindUniqueArgs";
import { CreateCloudflareConfigArgs } from "./CreateCloudflareConfigArgs";
import { UpdateCloudflareConfigArgs } from "./UpdateCloudflareConfigArgs";
import { DeleteCloudflareConfigArgs } from "./DeleteCloudflareConfigArgs";
import { Account } from "../../account/base/Account";
import { CloudflareConfigService } from "../cloudflareConfig.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CloudflareConfig)
export class CloudflareConfigResolverBase {
  constructor(
    protected readonly service: CloudflareConfigService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CloudflareConfig",
    action: "read",
    possession: "any",
  })
  async _cloudflareConfigsMeta(
    @graphql.Args() args: CloudflareConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CloudflareConfig])
  @nestAccessControl.UseRoles({
    resource: "CloudflareConfig",
    action: "read",
    possession: "any",
  })
  async cloudflareConfigs(
    @graphql.Args() args: CloudflareConfigFindManyArgs
  ): Promise<CloudflareConfig[]> {
    return this.service.cloudflareConfigs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CloudflareConfig, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CloudflareConfig",
    action: "read",
    possession: "own",
  })
  async cloudflareConfig(
    @graphql.Args() args: CloudflareConfigFindUniqueArgs
  ): Promise<CloudflareConfig | null> {
    const result = await this.service.cloudflareConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CloudflareConfig)
  @nestAccessControl.UseRoles({
    resource: "CloudflareConfig",
    action: "create",
    possession: "any",
  })
  async createCloudflareConfig(
    @graphql.Args() args: CreateCloudflareConfigArgs
  ): Promise<CloudflareConfig> {
    return await this.service.createCloudflareConfig({
      ...args,
      data: {
        ...args.data,

        account: args.data.account
          ? {
              connect: args.data.account,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CloudflareConfig)
  @nestAccessControl.UseRoles({
    resource: "CloudflareConfig",
    action: "update",
    possession: "any",
  })
  async updateCloudflareConfig(
    @graphql.Args() args: UpdateCloudflareConfigArgs
  ): Promise<CloudflareConfig | null> {
    try {
      return await this.service.updateCloudflareConfig({
        ...args,
        data: {
          ...args.data,

          account: args.data.account
            ? {
                connect: args.data.account,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CloudflareConfig)
  @nestAccessControl.UseRoles({
    resource: "CloudflareConfig",
    action: "delete",
    possession: "any",
  })
  async deleteCloudflareConfig(
    @graphql.Args() args: DeleteCloudflareConfigArgs
  ): Promise<CloudflareConfig | null> {
    try {
      return await this.service.deleteCloudflareConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "account",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async getAccount(
    @graphql.Parent() parent: CloudflareConfig
  ): Promise<Account | null> {
    const result = await this.service.getAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
