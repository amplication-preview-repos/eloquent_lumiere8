/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DnsRecord } from "./DnsRecord";
import { DnsRecordCountArgs } from "./DnsRecordCountArgs";
import { DnsRecordFindManyArgs } from "./DnsRecordFindManyArgs";
import { DnsRecordFindUniqueArgs } from "./DnsRecordFindUniqueArgs";
import { CreateDnsRecordArgs } from "./CreateDnsRecordArgs";
import { UpdateDnsRecordArgs } from "./UpdateDnsRecordArgs";
import { DeleteDnsRecordArgs } from "./DeleteDnsRecordArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { DnsRecordService } from "../dnsRecord.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DnsRecord)
export class DnsRecordResolverBase {
  constructor(
    protected readonly service: DnsRecordService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DnsRecord",
    action: "read",
    possession: "any",
  })
  async _dnsRecordsMeta(
    @graphql.Args() args: DnsRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DnsRecord])
  @nestAccessControl.UseRoles({
    resource: "DnsRecord",
    action: "read",
    possession: "any",
  })
  async dnsRecords(
    @graphql.Args() args: DnsRecordFindManyArgs
  ): Promise<DnsRecord[]> {
    return this.service.dnsRecords(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DnsRecord, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DnsRecord",
    action: "read",
    possession: "own",
  })
  async dnsRecord(
    @graphql.Args() args: DnsRecordFindUniqueArgs
  ): Promise<DnsRecord | null> {
    const result = await this.service.dnsRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DnsRecord)
  @nestAccessControl.UseRoles({
    resource: "DnsRecord",
    action: "create",
    possession: "any",
  })
  async createDnsRecord(
    @graphql.Args() args: CreateDnsRecordArgs
  ): Promise<DnsRecord> {
    return await this.service.createDnsRecord({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DnsRecord)
  @nestAccessControl.UseRoles({
    resource: "DnsRecord",
    action: "update",
    possession: "any",
  })
  async updateDnsRecord(
    @graphql.Args() args: UpdateDnsRecordArgs
  ): Promise<DnsRecord | null> {
    try {
      return await this.service.updateDnsRecord({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DnsRecord)
  @nestAccessControl.UseRoles({
    resource: "DnsRecord",
    action: "delete",
    possession: "any",
  })
  async deleteDnsRecord(
    @graphql.Args() args: DeleteDnsRecordArgs
  ): Promise<DnsRecord | null> {
    try {
      return await this.service.deleteDnsRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(@graphql.Parent() parent: DnsRecord): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
