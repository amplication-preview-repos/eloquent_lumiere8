/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DnsRecord as PrismaDnsRecord,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class DnsRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DnsRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dnsRecord.count(args);
  }

  async dnsRecords(
    args: Prisma.DnsRecordFindManyArgs
  ): Promise<PrismaDnsRecord[]> {
    return this.prisma.dnsRecord.findMany(args);
  }
  async dnsRecord(
    args: Prisma.DnsRecordFindUniqueArgs
  ): Promise<PrismaDnsRecord | null> {
    return this.prisma.dnsRecord.findUnique(args);
  }
  async createDnsRecord(
    args: Prisma.DnsRecordCreateArgs
  ): Promise<PrismaDnsRecord> {
    return this.prisma.dnsRecord.create(args);
  }
  async updateDnsRecord(
    args: Prisma.DnsRecordUpdateArgs
  ): Promise<PrismaDnsRecord> {
    return this.prisma.dnsRecord.update(args);
  }
  async deleteDnsRecord(
    args: Prisma.DnsRecordDeleteArgs
  ): Promise<PrismaDnsRecord> {
    return this.prisma.dnsRecord.delete(args);
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.dnsRecord
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
